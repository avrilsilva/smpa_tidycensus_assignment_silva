---
title: "Tidyverse Census Assignment"
author: "Avril Silva"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## You will need

-   A Census API key

## Load libraries and establish settings

You'll need to load two packages for this: the tidyverse and tidycensus.

**Task** load these two packages

```{r}
# Turn off scientific notation
options(scipen=999)

# Load the tidyverse.
library(tidyverse)
library(tidycensus)
```

## Setup Census API

You'll need your Census API Key:

**Task** set your API Key if you haven't already

```{r echo=FALSE}

myapikey <- "2a6f8c21a30d3024e038d67d7d4eba647dc79cd4"

census_api_key(myapikey, overwrite=TRUE)
```

## Load and view ACS variables

You'll also need to load the list of American Community Survey variables from the 2021 5-year estimates so you can identify the codes you need:

**Task** load the variables from the 2021 5-year ACS and save them to a dataframe

```{r}

censusvariables <- load_variables(2021, "acs5", cache = TRUE)

# After looking at the recording from class, I figured out how to access the data from the tidycensus library and make a table by loading the variables from the 2021 data from a 5 year range. By looking at your code, I was able to replicate it to obtain the 2021 variables. 

```

## Answer questions

**Q1** What is the Maryland jurisdiction with the lowest median age, according to the ACS 2021 5-year estimates? You will need to find the variable for median age first. 

```{r}
medianage <- "B01002_001"


get_acs(geography = "county", 
        variables = medianage,
        state = "MD")

# After a bunch of trial and error with the API key, I was finally able to use a similar command used in class to get the median age variable and set its code to a newly named, "medianage" variable and sort it by counties in Maryland. As a result, you can find that the county, or jurisdiction, with the lowest median age in Maryland is Baltimore City, Maryland. 
        
        




```


**Q2** Which Maryland counties have a median age of at least 50? You can use the dataframe you just made to answer this, but you must write code to display only those counties with a median age of at least 50. 

```{r}
get_acs(geography = "county", variables = medianage, state = "MD") %>% 
  filter(estimate >= 50)


# By using a similar code as the previous question but using the filtering command, you can determine that Talbot County, Maryland and Worcester County, Maryland are the two counties that have a median age of at least 50 in Maryland. 


```


**Q3** We're interested in knowing which Maryland counties have the highest percentage of 5-17 year-olds who speak Spanish at home and *also* speak English fluently. Start with the code you wrote for Q1 and alter it to show the total population of 5-17 year-olds by county. Then create a second dataframe to show the number of 5-17 year-olds by county living in homes where Spanish is spoken but who speak English "very well" according to the ACS. To do this, you will need to find the ACS variables that represent those subjects. HINT: the phrase "very well" shows up in multiple variables - you want the one that doesn't include other factors like citizenship.

For each dataframe, rename the `estimate` column to a meaningful name you've given the ACS variable, remove the `variable` columns in each using select and then join them on GEOID and NAME. Then you can add a column to calculate the percentage of the total 5-17 population that speaks Spanish at home.

Which county has the highest percentage of 5-17 year-olds who speak Spanish at home and also speak English very well?

```{r}

totcountypop <- "B16007_002"
verywellenglish <- "B16004_005"


totpoptable <- get_acs(geography = "county", variables = totcountypop, state = "MD") %>%
  rename("totpop517" = "estimate") %>% 
  select(-variable)
  
spanishtable <- get_acs(geography = "county", variables = verywellenglish, state = "MD") %>%
  rename("verywellenglish" = "estimate") %>% 
  select(-variable)

spanishfinaltable <- left_join(totpoptable, spanishtable, by=c("GEOID" = "GEOID", "NAME" = "NAME")) %>%
  mutate(pct_517spanish = (verywellenglish / totpop517) * 100)

# After a lot of work trying to remember how to use the "rename" function, finding the right variables, and carefully joining the two tables, I was able to create two data frames and join them to create one comprehensive table in the end that tells us that the county with the highest percentage of 5-17 year-olds that speak Spanish and can also speak English "very well" is Prince George's County, Maryland with almost 19.5%. 


```


**Q4** Given the counties with the largest percentage of 5-17 year-olds that speak Spanish at home, which county stands out to you in the data as different from the others? How would you describe the top 5 counties? How would you describe Garrett County's numbers?

The top five counties in the data-- Prince George's County, Montgomery County, Talbot County, Frederick County, Dorchester County-- are what could be described as counties that would attract the most migrants speaking Spanish as a result of their location close to shorelines and airports, such as DCA and BWI. Additionally, these counties have some of the country's highest concentration of Central American populations in the country, another indicator that their location could be behind their high percentage of young, Spanish speakers who can speak English "very well". The county that stands out to me, as a result of some of these factors, that does not have that great a percentage is Baltimore and Baltimore City counties, where I would expect these city centers and larger counties to typically attract Spanish speaking households and immigrants. Garrett County's low percentage, of a little over 1%, could also  probably be attributed to their geographical location. The county is the located the farthest west of any other county, nearing the Appalachian where it has been a historically, predominately white population. This could account for the low percentage that, ultimately, does not surprise me. 


**Q5** Pennsylvanians are currently requesting and submitting mail ballots for the November election. You'd like to know more about the people who live in the areas sending in mail ballots. Read in the `zip_totals.csv` file in the data folder containing the number of returned mail ballots per zip code. Then create a dataframe of Pennsylvania ZCTAs that include the following variables from the 2019 ACS: total population and median income. You will need to add `output = "wide"` to the get_acs function so that you get columns for those two variables' estimates and margins of error.

Join the ZCTA dataframe to the zip totals dataframe and calculate a per capita rate for mail ballots per 100 population in each ZCTA, and write code to answer the following questions?

-   Which zip code *that has returned at least 100 mail ballots* has the highest per capita rate?

The zip code that returned at least 100 mail ballots and had the highest per capita rate was 18459. 

-   Where is that zip code and what does Census Reporter say about its demographics?

The zip code is in northeast Pennsylvania near Scranton, and its demographics listed on Census Reporter include: Median Age of 49.6, 5.5% of people under the poverty line, and 95% white population. 

-   For zip codes with a per capita rate of at least 10 returned ballots per 100 people, how many have median incomes of at least \$100,000?

Four zip codes have a per capita rate of at least 10 returned ballots per 100 people and have at least a median income of $100,000. 

-   How many have median incomes less than the state figure of \$68,957?

1214 zip codes have a median income less than the state figure of $68,957. 

-   What's the most interesting one from this last result?

The one I find to be the most interesting is the zip code 15921, which has the highest per capita, but also the lowest population listed at 54. So, there may be something going on. 

```{r}
pennvariables <- load_variables(2019, "acs5", cache = TRUE)

myvars <- c(tot_pop2019 <- "B01003_001", med_income <- "B19013_001")

data2019 <- get_acs(geography = "zcta", variables = c(myvars), year = 2019, survey = "acs5", state = "PA", output = "wide", )

# This line of code, using the same principles as the code from earlier, was easy to construct. The only issue I had, however, was in finding what order all of the inputs had to be put in order for the data to go through. It ended up taking me a long time as a result, but I got it in the end. 

```


```{r}

pa_zip_pop <- inner_join(pa_zip_totals, data2019, by = c("zip" = "GEOID"))

pa_zip_pop%>%
  rename("total_pop" = "B01003_001E")%>%
  rename("med_income" = "B19013_001E")%>%
  mutate(per_cap_ballots = (count/total_pop)*100)%>%
  select("zip", "per_cap_ballots", "med_income", "total_pop", "count")%>%
  filter(med_income <= 68957) %>% 
  arrange(desc(per_cap_ballots))

# For this question, I used a bunch of different arranging and filtering techniques to answer each of the questions above. To create the per capita column, however, I went back and looked at the video recording to see how to best approach columns that manipulate values in other columns, and applied a similar thought process here. It is kinda cool to see how many ways I can view a table to get exactly what values I am looking for, just by using the filtering, arranging, selecting, and mutating tools. 




```
